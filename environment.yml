# This setup is tested with NIVIDIA Driver Version: 530.41.03
# (and CUDA Version: 12.1, but that should be overridden by jax install)
name: dreamer-animalai
channels:
  # Order is important <https://github.com/google/jax#conda-installation>
  - default # We add this ourselves, cause we don't want Python/pip from forge (it crashes dreamerv3 installation).
  - conda-forge
  - nvidia
dependencies:
  - python=3.10.8
  - pip

  # We specify it here such that
  # Required by mlagents-envs 0.30.0.
  # We put it here, because mlagents gets installed by pip, and we want conda to take numpy version into account before installing jax.
  # Note: Conda has dependency conflicts that we don't understand, but don't seem to crash anything (for now, ignoring)
  # - numpy=1.21.2

  # Install JAX with GPU support first
  # <https://github.com/google/jax#conda-installation>
  - jaxlib=*=*cuda*
  - jax=0.4.12 # pin on 0.4.12 because later versions require larger numpy, and resolving is very slow
  - cuda-nvcc

  # ... and the rest
  - pip:
      - gym==0.26.2 # Explicit pin for clarity

      # Dreamerv3 with gym 0.26 and gymnasium compatibility
      # However, you have to install it later, as doing it together with jax makes conda install jax[cpu] instead of jax[cuda]
      # - "git+https://github.com/Kinds-of-Intelligence-CFI/dreamerv3-compat.git#egg=dreamerv3"

      # The PyPI animalai package (https://pypi.org/project/animalai/) is outdated
      # and not maintained by LCFI/KoI anymore. The updated version comes from the
      # <https://github.com/Kinds-of-Intelligence-CFI/animal-ai> repo.
      # We take the hash of the currently latest commit.
      # Below is the conda alternative for `pip install ...`
      - "git+https://github.com/Kinds-of-Intelligence-CFI/animal-ai.git@507994582e81cbe019c12843837f1341473f67f7#egg=animalai&subdirectory=animalai"
      # - mlagents==0.30.0 (implied by dependency above)
#
#
# -----------------------------
# Important version constraints
# -----------------------------

# animalai v3.0.2 requires mlagents 0.30.0
#     <https://github.com/Kinds-of-Intelligence-CFI/animal-ai>
# animalai v3.0.1 requires mlagents 0.27.0
#     <https://github.com/Kinds-of-Intelligence-CFI/animal-ai>
#     (Release 18 <https://github.com/Unity-Technologies/ml-agents/releases/tag/release_18>)
# dreamerv3 1.1.0 requires gym==0.19.0
#     <https://github.com/danijar/dreamerv3/blob/main/requirements.txt>
# mlagents-envs 0.30.0 requires gym>=0.21.0
#     <https://github.com/Unity-Technologies/ml-agents/blob/3fd3fdf1570b58109f5ad883b364b3526bc68ad7/ml-agents-envs/setup.py#L57>
#     ==> thus also mlagents 0.30.0, thus also animalai (GH) v3.0.2
# mlagents-envs 0.30.0 requires numpy==1.21.2
#     <https://github.com/Unity-Technologies/ml-agents/blob/develop/ml-agents-envs/setup.py#L59>
#     ==> thus can't use with jax 0.4.14
# mlagents 0.30.0 requires Python >=3.8.13,<=3.10.8
#    <https://github.com/Unity-Technologies/ml-agents/blob/89a6357016f4bd685bb0004f83a3a1c2b27a0e05/ml-agents/setup.py>
# mlagents 0.27.0 requires Python >=3.6.1, but smaller than?
#    <https://github.com/Unity-Technologies/ml-agents/blob/c1b26d49e4f4fc692c2688531f9e7c69dba12682/ml-agents/setup.py>
# mlagents-envs 0.27.0 requires numpy < 1.20
#    Uses numpy.bool, which was deprecated in https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
#    Latest jax that allows a numpy < 1.20 is XXX with numpy>=1.19
# jax 0.4.14 requires Python > 3.8
#    <https://github.com/google/jax/blob/main/CHANGELOG.md>
# jax 0.4.14 requires numpy > 1.22
#    <https://github.com/google/jax/blob/main/CHANGELOG.md>
#     --> means we have to use lower jax
# jax 0.4.x requires high enough proto > 3.20
# protobuf 4.23 (latest version) is not compatible with the proto files generated by mlagents <= 0.30.0
#    Two options (provided by proto package)
#    1. Downgrade the proto package to 3.20.x or lower. (not compatible with decent jax versions)
#    2. Set PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python (but this will use pure-Python parsing and will be much slower).
#    -> the option we choose
#
# Question, does ml-agents=0.27.0 work with python 3.10.8?
#     Initially there were issues with torch install
#     => We got with python=3.9 instead
